"""
NetworkController - THE PUNISHER
Point d'entr√©e principal de l'application
Advanced Network Controller with Modern Dark Interface
"""

import sys
import os
import threading
import time
from pathlib import Path

# Ajouter le dossier app au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.core import (
    get_app_logger, get_config, SystemUtils, APP_NAME, APP_VERSION, APP_AUTHOR
)
from app.gui import show_splash_screen, create_main_window


def check_requirements():
    """V√©rifie les pr√©requis de l'application"""
    logger = get_app_logger("Startup")
    
    # V√©rifier Python version
    if sys.version_info < (3, 8):
        logger.critical("Python 3.8+ requis")
        return False
    
    # V√©rifier les privil√®ges administrateur
    if not SystemUtils.is_admin():
        logger.warning("Privil√®ges administrateur recommand√©s")
        # Ne pas bloquer, juste avertir
    
    # V√©rifier les d√©pendances critiques
    try:
        import scapy
        import customtkinter
        import psutil
        import netifaces
        logger.info("Toutes les d√©pendances sont disponibles")
        return True
    except ImportError as e:
        logger.critical(f"D√©pendance manquante: {e}")
        return False


def show_startup_info():
    """Affiche les informations de d√©marrage"""
    logger = get_app_logger("Startup")
    
    print("=" * 60)
    print(f"üî• {APP_NAME} v{APP_VERSION} üî•")
    print("üíÄ Advanced Network Controller - Punisher Edition üíÄ")
    print(f"üë§ Author: {APP_AUTHOR}")
    print("=" * 60)
    print()
    
    # Informations syst√®me
    system_info = SystemUtils.get_system_info()
    print(f"üñ•Ô∏è  System: {system_info['system']} {system_info['release']}")
    print(f"üêç Python: {system_info['python_version']}")
    print(f"‚ö° Admin: {'Yes' if SystemUtils.is_admin() else 'No'}")
    print()
    
    # Avertissement de s√©curit√©
    print("‚ö†Ô∏è  SECURITY WARNING ‚ö†Ô∏è")
    print("This tool is for authorized network testing only!")
    print("Use responsibly and in compliance with local laws.")
    print("The author is not responsible for misuse.")
    print()
    
    logger.info(f"{APP_NAME} v{APP_VERSION} starting up...")
    logger.info(f"System: {system_info['system']} {system_info['release']}")
    logger.info(f"Python: {system_info['python_version']}")
    logger.info(f"Admin privileges: {'Yes' if SystemUtils.is_admin() else 'No'}")

def request_admin_if_needed():
    """Demande les privil√®ges admin si n√©cessaire (Windows)"""
    if os.name == 'nt' and not SystemUtils.is_admin():
        logger = get_app_logger("AdminRequest")
        
        print("‚ö†Ô∏è  Privil√®ges administrateur requis pour un fonctionnement optimal")
        print("üîÑ Tentative de relancement en mode administrateur...")
        
        try:
            import ctypes
            # Relancer le script avec des privil√®ges admin
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                f'"{" ".join(sys.argv)}"',
                None, 
                1
            )
            logger.info("Relancement en mode administrateur demand√©")
            return False  # Arr√™ter l'instance actuelle
        except Exception as e:
            logger.warning(f"Impossible de relancer en admin: {e}")
            print("‚ùå Impossible de relancer automatiquement en mode administrateur")
            print("üìù Veuillez utiliser run_as_admin.bat ou lancer manuellement en admin")
            return True  # Continuer quand m√™me
    
    return True  # D√©j√† admin ou pas Windows

def main():
    """Point d'entr√©e principal de l'application"""
    
    # Afficher les informations de d√©marrage
    show_startup_info()
    
    # Demander admin si n√©cessaire
    if not request_admin_if_needed():
        return  # Arr√™ter si relancement en admin
    
    # V√©rifier les pr√©requis
    if not check_requirements():
        print("‚ùå Les pr√©requis ne sont pas satisfaits. Arr√™t de l'application.")
        input("Appuyez sur Entr√©e pour quitter...")
        sys.exit(1)
    
    logger = get_app_logger("Main")
    config = get_config()
    
    # Avertissement si pas admin
    if not SystemUtils.is_admin():
        print("‚ö†Ô∏è  ATTENTION: Application lanc√©e sans privil√®ges administrateur")
        print("üí° Certaines fonctionnalit√©s peuvent ne pas fonctionner correctement")
        print("üéØ Utilisez run_as_admin.bat pour un fonctionnement optimal")
        print()
        
        # Demander confirmation
        response = input("Continuer quand m√™me ? (y/N): ").lower().strip()
        if response not in ['y', 'yes', 'o', 'oui']:
            print("üíÄ The Punisher needs more power... üíÄ")
            return
    
    try:
        # Variable pour la fen√™tre principale
        main_window = None
        
        def on_splash_complete():
            """Callback de fin de splash screen"""
            nonlocal main_window
            try:
                # Cr√©er et lancer la fen√™tre principale
                main_window = create_main_window()
                main_window.run()
            except Exception as e:
                logger.critical(f"Erreur fatale dans la fen√™tre principale: {e}")
                import traceback
                traceback.print_exc()
        
        # Afficher le splash screen si activ√©
        if config.ui.show_splash_screen:
            print("üöÄ Launching application...")
            print("üíÄ Preparing the Punisher interface...")
            
            # Lancer le splash screen
            splash_thread = threading.Thread(
                target=show_splash_screen,
                args=(config.ui.splash_duration, on_splash_complete),
                daemon=False
            )
            splash_thread.start()
            splash_thread.join()
        else:
            # Lancer directement la fen√™tre principale
            on_splash_complete()
    
    except KeyboardInterrupt:
        logger.info("Application interrompue par l'utilisateur")
        print("\nüíÄ The Punisher says goodbye... üíÄ")
    
    except Exception as e:
        logger.critical(f"Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
        
        # Afficher l'erreur √† l'utilisateur
        try:
            import tkinter.messagebox as mb
            mb.showerror(
                "Fatal Error",
                f"Une erreur fatale s'est produite:\n\n{e}\n\n"
                f"Consultez les logs pour plus de d√©tails."
            )
        except:
            print(f"‚ùå Erreur fatale: {e}")
            input("Appuyez sur Entr√©e pour quitter...")
    
    finally:
        logger.info("Application ferm√©e")
        print("\nüíÄ The Punisher has left the network... üíÄ")


if __name__ == "__main__":
    main()